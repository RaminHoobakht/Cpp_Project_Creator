#ifndef PRJ_CREATOR_FILE_CONTENTS_HPP
#define PRJ_CREATOR_FILE_CONTENTS_HPP

#include <string>

namespace scripts {

const static std::string script_run_sh{
    "#! /bin/bash\n"
    "\n"
    "nice -n 20 clear\n"
    "\n"
    "if [[ $1 == 0 ]]; then\n"
    "    nice -n 20 ls -ltrha bin/result.out\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 bin/result.out\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "else\n"
    "    nice -n 20 rm -rf bin/*.o\n"
    "    nice -n 20 rm -rf bin/*.out\n"
    "    nice -n 20 rm -rf bin/*result*\n"
    "    nice -n 20 rm -rf bin/*main*\n"
    "    nice -n 20 clear\n"
    "    ./compiler.sh $1\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo \"\"\n"
    "    #nice -n 20 echo \"PRESS ANY KEY TO EXECUTE PROGRAM ...\"\n"
    "    #read\n"
    "    nice -n 20 ls -ltrha bin/result.out\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 bin/result.out\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "fi"};

const static std::string script_new_sh{
    "#! /bin/bash\n"
    "\n"
    "clear\n"
    "git add --all\n"
    "git commit -m 'new source file'\n"
    "\n"
    "echo \"#include <iostream>\n"
    "\n"
    "[[maybe_unused]] static constexpr char nl{'\\n'};\n"
    "[[maybe_unused]] static constexpr char sp{'\\x20'};\n"
    "[[maybe_unused]] static constexpr char "
    "sep[33]{\\\"-------------------------------\\\"};\n"
    "\n"
    "\n"
    "int main() {\n"
    "\n"
    "\n"
    "    std::cout << \\\"\\nThe End ...\\\" << std::endl;\n"
    "    return (EXIT_SUCCESS);\n"
    "}\" >> src/app/main_$1.cpp\n"
    "\n"
    "git add --all\n"
    "git commit -m 'new source file'\n"
    "\n"};

const static std::string cmake_new_script{
    "#! /bin/bash\n"
    "\n"
    "clear\n"
    "git add --all\n"
    "git commit -m 'new source file'\n"
    "\n"
    "mv src/app/main.cpp src/app/main_$1.cpp\n"
    "\n"
    "echo \"#include <iostream>\n"
    "\n"
    "[[maybe_unused]] static constexpr char nl{'\\n'};\n"
    "[[maybe_unused]] static constexpr char sp{'\\x20'};\n"
    "[[maybe_unused]] static constexpr char "
    "sep[33]{\\\"-------------------------------\\\"};\n"
    "\n"
    "\n"
    "int main() {\n"
    "\n"
    "\n"
    "    std::cout << \\\"\\nThe End ...\\\" << std::endl;\n"
    "    return (EXIT_SUCCESS);\n"
    "}\" >> src/app/main.cpp\n"
    "\n"
    "git add --all\n"
    "git commit -m 'new source file'\n"
    "\n"};

const static std::string script_compiler_sh{
    "#! /bin/bash\n"
    "\n"
    "nice -n 20 g++ -std=c++23 -g3 -fgnu-tm -pthread -lpthread -fconcepts "
    "-pedantic -pedantic-errors -Wall -Wextra -Wconversion -Wcast-align "
    "-Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wlogical-op "
    "-Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast "
    "-Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-conversion "
    "-Wsign-promo -Wstrict-null-sentinel -Wswitch-default -Wundef -Weffc++ "
    "-Wfloat-equal -fmessage-length=0 -v -fPIC -fPIE -m64 -march=corei7-avx "
    "src/app/main_$1.cpp -o bin/result.out\n"};

const static std::string script_compiler_postgres_sh{
    "nice -n 20 g++ -std=c++23 -g3 -fgnu-tm -pthread -lpthread -fconcepts "
    "-pedantic -pedantic-errors -Wall -Wextra -Wconversion -Wcast-align "
    "-Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wlogical-op "
    "-Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast "
    "-Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-conversion "
    "-Wsign-promo -Wstrict-null-sentinel -Wswitch-default -Wundef -Weffc++ "
    "-Wfloat-equal -fmessage-length=0 -v -fPIC -fPIE -m64 -march=corei7-avx "
    "src/app/main_$1.cpp -lpqxx -lpq -o bin/result.out"};

const static std::string script_main_cpp{
    "#include <iostream>\n"
    "\n"
    "[[maybe_unused]] static constexpr char nl { '\\n' };\n"
    "[[maybe_unused]] static constexpr char sp { '\\x20' };\n"
    "[[maybe_unused]] static constexpr char sep[33] "
    "{\"-------------------------------\"};\n"
    "\n"
    "int main() {\n"
    "\n"
    "\n"
    "\tstd::cout << \"\\nThe End ...\" << std::endl;\n"
    "\treturn (EXIT_SUCCESS);\n"
    "}"};

const static std::string script_main_qt_cpp{
    "#include <QApplication>\n"
    "#include <QDebug>\n"
    "\n"
    "int main(int argc, char *argv[]) {\n"
    "\n"
    "  QApplication app(argc, argv);\n"
    "\n"
    "\n"
    "\n"
    "  qDebug() << \"\\nThe End ...\";\n"
    "  return app.exec();\n"
    "}"};

const static std::string script_main_qt_cli_cpp{
    "#include <QCoreApplication>\n"
    "#include <QDebug>\n"
    "\n"
    "int main(int argc, char *argv[]) {\n"
    "\n"
    "  QCoreApplication app(argc, argv);\n"
    "\n"
    "\n"
    "\n"
    "  qDebug() << \"\\nThe End ...\";\n"
    "  return app.exec();\n"
    "}"};

const static std::string script_main_001_cpp{
    "#include <iostream>\n"
    "\n"
    "[[maybe_unused]] static constexpr char nl{'\\n'};\n"
    "[[maybe_unused]] static constexpr char sp{'\\x20'};\n"
    "[[maybe_unused]] static constexpr char "
    "sep[33]{\\\"-------------------------------\\\"};\n"
    "\n"
    "\n"
    "int main() {\n"
    "\n"
    "    std::cout << \"\\nThe End ...\" << std::endl;\n"
    "    return (EXIT_SUCCESS);\n"
    "}"};

const static std::string script_cmake_txt{
    "cmake_minimum_required(VERSION 3.5)\n"
    "\n"
    "set(CMAKE_PROJECT_NAME [replace])\n"
    "set(CMAKE_PROJECT_VERSION 1)\n"
    "set(CMAKE_PROJECT_VERSION_MAJOR 0)\n"
    "set(CMAKE_PROJECT_VERSION_MINOR 1)\n"
    "set(CMAKE_PROJECT_DESCRIPTION \"training C++\")\n"
    "\n"
    "project (\n"
    "        ${CMAKE_PROJECT_NAME}\n"
    "        VERSION "
    "${CMAKE_PROJECT_VERSION_MAJOR}.${CMAKE_PROJECT_VERSION_MINOR}\n"
    "        LANGUAGES CXX\n"
    "        DESCRIPTION ${CMAKE_PROJECT_DESCRIPTION})\n"
    "\n"
    "set(CMAKE_CXX_STANDARD 23)\n"
    "set(CMAKE_CXX_STANDARD_DEFAULT 23)\n"
    "set(CMAKE_CXX_STANDARD_REQUIRED ON)\n"
    "set(CMAKE_INCLUDE_CURRENT_DIR ON)\n"
    "\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++23 -O0 -g3 -pthread "
    "-lpthread\")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic -Wall -Wextra "
    "-Wconversion \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wcast-align -Wcast-qual "
    "-Wdisabled-optimization \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wlogical-op "
    "-Wmissing-declarations \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wmissing-include-dirs "
    "-Wredundant-decls \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wshadow -Wsign-conversion "
    "-Wswitch-default \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wundef -Wfloat-equal "
    "-fmessage-length=0 \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -v -fPIC -fPIE -m64 "
    "-march=corei7-avx  \")\n"
    "\n"
    "add_executable(${CMAKE_PROJECT_NAME} src/app/main.cpp)\n"
    "\n"
    "target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC "
    "\"${PROJECT_BINARY_DIR}\")"};

const static std::string script_cmake_postgres_txt{
    "cmake_minimum_required(VERSION 3.5)\n"
    "\n"
    "set(CMAKE_PROJECT_NAME [replace])\n"
    "set(CMAKE_PROJECT_VERSION 1)\n"
    "set(CMAKE_PROJECT_VERSION_MAJOR 0)\n"
    "set(CMAKE_PROJECT_VERSION_MINOR 1)\n"
    "set(CMAKE_PROJECT_DESCRIPTION \"training C++\")\n"
    "\n"
    "project (\n"
    "        ${CMAKE_PROJECT_NAME}\n"
    "        VERSION "
    "${CMAKE_PROJECT_VERSION_MAJOR}.${CMAKE_PROJECT_VERSION_MINOR}\n"
    "        LANGUAGES CXX\n"
    "        DESCRIPTION ${CMAKE_PROJECT_DESCRIPTION})\n"
    "\n"
    "set(CMAKE_CXX_STANDARD 23)\n"
    "set(CMAKE_CXX_STANDARD_DEFAULT 23)\n"
    "set(CMAKE_CXX_STANDARD_REQUIRED ON)\n"
    "set(CMAKE_INCLUDE_CURRENT_DIR ON)\n"
    "\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++23 -O0 -g3 -pthread "
    "-lpthread -latomic\")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic -Wall -Wextra "
    "-Wconversion \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wcast-align -Wcast-qual "
    "-Wdisabled-optimization \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wlogical-op "
    "-Wmissing-declarations \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wmissing-include-dirs "
    "-Wredundant-decls \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wshadow -Wsign-conversion "
    "-Wswitch-default \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wundef -Wfloat-equal "
    "-fmessage-length=0 \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -v -fPIC -fPIE -m64 "
    "-march=corei7-avx  \")\n"
    "\n"
    "add_executable(${CMAKE_PROJECT_NAME} src/app/main.cpp\n"
    "\t#src/header/dbconnect.hpp\n"
    "\t#src/header/dbconnect.cpp\n"
    ")\n"
    "\n"
    "add_library(LibsModule src/app/main.cpp)\n"
    "\n"
    "set(PQXX /usr/local/include/pqxx)\n"
    "find_library(PQXX_LIB pqxx)\n"
    "find_library(PQ_LIB pq)\n"
    "TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${PQXX_LIB} ${PQ_LIB})\n"
    "\n"
    "\n"
    "target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC "
    "\"${PROJECT_BINARY_DIR}\")"};

const static std::string script_cmake_qt_cli_txt{
    "cmake_minimum_required(VERSION 3.5)\n"
    "project([replace])\n"
    "\n"
    "set(CMAKE_CXX_STANDARD 23)\n"
    "set(CMAKE_AUTOMOC ON)\n"
    "set(CMAKE_AUTORCC ON)\n"
    "set(CMAKE_AUTOUIC ON)\n"
    "\n"
    "set(CMAKE_PREFIX_PATH \"/home/ramin/Qt/6.6.2/gcc_64/lib/cmake\")\n"
    "\n"
    "find_package(Qt6 COMPONENTS\n"
    "        Core\n"
    "        REQUIRED)\n"
    "\n"
    "add_executable([replace] src/app/main.cpp)\n"
    "target_link_libraries([replace]\n"
    "        Qt::Core\n"
    ")"};

const static std::string script_cmake_sh{
    "#! /bin/bash\n"
    "\n"
    "if [[ $1 == 0 ]]; then\n"
    "    nice -n 20 ./build/[replace]\n"
    "else\n"
    "  nice -n 20 cmake -B build -S .\n"
    "  nice -n 20 cmake --build build --config debug --clean-first\n"
    "  nice -n 20 echo \"\"\n"
    "  nice -n 20 echo \"\"\n"
    "  #nice -n 20 echo \"PRESS ANY KEY TO EXECUTE PROGRAM ...\"\n"
    "  #read\n"
    "  nice -n 20 ls -lthra ./build/[replace]\n"
    "  nice -n 20 echo \"\"\n"
    "  nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "  nice -n 20 echo \"\"\n"
    "  nice -n 20 ./build/[replace]\n"
    "  nice -n 20 echo \"\"\n"
    "  nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "fi"};

const static std::string script_main_001_asm{
    "section\t.text\n"
    "   global _start     ;must be declared for linker (ld)\n"
    "\t\n"
    "_start:\t            ;tells linker entry point\n"
    "   mov\tedx,len     ;message length\n"
    "   mov\tecx,msg     ;message to write\n"
    "   mov\tebx,1       ;file descriptor (stdout)\n"
    "   mov\teax,4       ;system call number (sys_write)\n"
    "   int\t0x80        ;call kernel\n"
    "\t\n"
    "   mov\teax,1       ;system call number (sys_exit)\n"
    "   int\t0x80        ;call kernel\n"
    "\n"
    "section\t.data\n"
    "msg db 'Hello, world!', 0xa  ;string to be printed\n"
    "len equ $ - msg     ;length of the string"};

const static std::string script_asm_sh{
    "#! /bin/bash\n"
    "\n"
    "# 32-bit ELF binary:\n"
    "# nasm -f elf32 -o <filename>.o <filename>.asm\n"
    "# ld -m elf_i386 -o <filename> <filename>.o\n"
    "\n"
    "# 64-bit ELF binary:\n"
    "# nasm -f elf64 -o <filename>.o <filename>.asm\n"
    "# ld -o <filename> <filename>.o\n"
    "\n"
    "### "
    "--------------------------------------------------------------------------"
    "--------\n"
    "\n"
    "# 32-bit ELF binary with libc:\n"
    "#nasm -f elf32 -o <filename>.o <filename>.asm\n"
    "#ld -m elf_i386 -dynamic-linker /lib/ld-linux.so.2 -o <filename> -lc "
    "<filename>.o\n"
    "\n"
    "# 64-bit ELF binary with libc:\n"
    "#nasm -f elf64 -o <filename>.o <filename>.asm\n"
    "#ld -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o <filename> -lc "
    "<filename>.o\n"
    "\n"
    "### "
    "--------------------------------------------------------------------------"
    "--------\n"
    "\n"
    "nice -n 20 clear\n"
    "\n"
    "if [[ $1 == 0 ]]; then\n"
    "    nice -n 20 ls -ltrha bin/asm_result.out\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 bin/asm_result.out\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "else\n"
    "    nice -n 20 rm -rf bin/*.o\n"
    "    nice -n 20 rm -rf bin/*.out\n"
    "    nice -n 20 rm -rf bin/*result*\n"
    "    nice -n 20 rm -rf bin/*main*\n"
    "    nice -n 20 clear\n"
    "    \n"
    "    nasm -f elf64 -o bin/asm_result.o src/asm/main_$1.asm\n"
    "    ld  -o bin/asm_result.out bin/asm_result.o\n"
    "\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo \"\"\n"
    "    #nice -n 20 echo \"PRESS ANY KEY TO EXECUTE PROGRAM ...\"\n"
    "    #read\n"
    "    nice -n 20 ls -ltrha bin/asm_result.out\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 bin/asm_result.out\n"
    "    nice -n 20 echo \"\"\n"
    "    nice -n 20 echo "
    "\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    "~~~~~~~~~~~~~\"\n"
    "fi"};

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

const static std::string script_cmake_qt_txt{
    "cmake_minimum_required(VERSION 3.5)\n"
    "\n"
    "project([replace] VERSION 0.1 LANGUAGES CXX)\n"
    "\n"
    "set(CMAKE_AUTOUIC ON)\n"
    "set(CMAKE_AUTOMOC ON)\n"
    "set(CMAKE_AUTORCC ON)\n"
    "\n"
    "set(CMAKE_PREFIX_PATH \"/home/ramin/Qt/6.8.0/gcc_64/lib/cmake\")\n"
    "\n"
    "set(CMAKE_CXX_STANDARD 23)\n"
    "set(CMAKE_CXX_STANDARD_DEFAULT 23)\n"
    "set(CMAKE_CXX_STANDARD_REQUIRED ON)\n"
    "set(CMAKE_INCLUDE_CURRENT_DIR ON)\n"
    "\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++23 -O0 -g3 -pthread "
    "-lpthread -latomic\")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic -Wall -Wextra "
    "-Wconversion \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wcast-align -Wcast-qual "
    "-Wdisabled-optimization \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wlogical-op "
    "-Wmissing-declarations \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wmissing-include-dirs "
    "-Wredundant-decls \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wshadow -Wsign-conversion "
    "-Wswitch-default \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wundef -Wfloat-equal "
    "-fmessage-length=0 \")\n"
    "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -v -fPIC -fPIE -m64 "
    "-march=corei7-avx  \")"
    "\n"
    "find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)\n"
    "find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)\n"
    "\n"
    "set(PROJECT_SOURCES\n"
    "\t\t\t\tsrc/app/main.cpp\n"
    "        #src/header/mainwindow.cpp\n"
    "        #src/header/mainwindow.hpp\n"
    ")\n"
    "\n"
    "if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)\n"
    "\t\tqt_add_executable([replace]\n"
    "\t\t\t\tMANUAL_FINALIZATION\n"
    "\t\t\t\t${PROJECT_SOURCES}\n"
    "\t\t)\n"
    "# Define target properties for Android with Qt 6 as:\n"
    "#    set_property(TARGET QPattern APPEND PROPERTY "
    "QT_ANDROID_PACKAGE_SOURCE_DIR\n"
    "#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)\n"
    "# For more information, see "
    "https://doc.qt.io/qt-6/qt-add-executable.html#target-creation\n"
    "else()\n"
    "\t\tif(ANDROID)\n"
    "\t\t\t\tadd_library([replace] SHARED\n"
    "\t\t\t\t\t\t${PROJECT_SOURCES}\n"
    "\t\t\t\t)\n"
    "# Define properties for Android with Qt 5 after find_package() calls as:\n"
    "#    set(ANDROID_PACKAGE_SOURCE_DIR "
    "\"${CMAKE_CURRENT_SOURCE_DIR}/android\")\n"
    "\t\telse()\n"
    "\t\t\t\tadd_executable([replace]\n"
    "\t\t\t\t\t\t${PROJECT_SOURCES}\n"
    "\t\t\t\t)\n"
    "\t\tendif()\n"
    "endif()\n"
    "\n"
    "target_link_libraries([replace] PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)\n"
    "\n"
    "# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt "
    "6.1.\n"
    "# If you are developing for iOS or macOS you should consider setting an\n"
    "# explicit, fixed bundle identifier manually though.\n"
    "if(${QT_VERSION} VERSION_LESS 6.1.0)\n"
    "\tset(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER "
    "com.example.[replace])\n"
    "endif()\n"
    "set_target_properties([replace] PROPERTIES\n"
    "\t\t${BUNDLE_ID_OPTION}\n"
    "\t\tMACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}\n"
    "\t\tMACOSX_BUNDLE_SHORT_VERSION_STRING "
    "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\n"
    "\t\tMACOSX_BUNDLE TRUE\n"
    "\t\tWIN32_EXECUTABLE TRUE\n"
    ")\n"
    "\n"
    "include(GNUInstallDirs)\n"
    "install(TARGETS [replace]\n"
    "\t\tBUNDLE DESTINATION .\n"
    "\t\tLIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n"
    "\t\tRUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n"
    ")\n"
    "\n"
    "if(QT_VERSION_MAJOR EQUAL 6)\n"
    "\t\tqt_finalize_executable([replace])\n"
    "endif()"};

const static std::string clang_tidy{
    "# Generated from CPP Project Creator.\n"
    "---\n"
    "Checks: '-*,\n"
    "bugprone-argument-comment,\n"
    "bugprone-assert-side-effect,\n"
    "bugprone-bad-signal-to-kill-thread,\n"
    "bugprone-branch-clone,\n"
    "bugprone-copy-constructor-init,\n"
    "bugprone-dangling-handle,\n"
    "bugprone-dynamic-static-initializers,\n"
    "bugprone-fold-init-type,\n"
    "bugprone-forward-declaration-namespace,\n"
    "bugprone-forwarding-reference-overload,\n"
    "bugprone-inaccurate-erase,\n"
    "bugprone-incorrect-roundings,\n"
    "bugprone-integer-division,\n"
    "bugprone-lambda-function-name,\n"
    "bugprone-macro-parentheses,\n"
    "bugprone-macro-repeated-side-effects,\n"
    "bugprone-misplaced-operator-in-strlen-in-alloc,\n"
    "bugprone-misplaced-pointer-arithmetic-in-alloc,\n"
    "bugprone-misplaced-widening-cast,\n"
    "bugprone-move-forwarding-reference,\n"
    "bugprone-multiple-statement-macro,\n"
    "bugprone-no-escape,\n"
    "bugprone-parent-virtual-call,\n"
    "bugprone-posix-return,\n"
    "bugprone-reserved-identifier,\n"
    "bugprone-sizeof-container,\n"
    "bugprone-sizeof-expression,\n"
    "bugprone-spuriously-wake-up-functions,\n"
    "bugprone-string-constructor,\n"
    "bugprone-string-integer-assignment,\n"
    "bugprone-string-literal-with-embedded-nul,\n"
    "bugprone-suspicious-enum-usage,\n"
    "bugprone-suspicious-include,\n"
    "bugprone-suspicious-memset-usage,\n"
    "bugprone-suspicious-missing-comma,\n"
    "bugprone-suspicious-semicolon,\n"
    "bugprone-suspicious-string-compare,\n"
    "bugprone-suspicious-memory-comparison,\n"
    "bugprone-suspicious-realloc-usage,\n"
    "bugprone-swapped-arguments,\n"
    "bugprone-terminating-continue,\n"
    "bugprone-throw-keyword-missing,\n"
    "bugprone-too-small-loop-variable,\n"
    "bugprone-undefined-memory-manipulation,\n"
    "bugprone-undelegated-constructor,\n"
    "bugprone-unhandled-self-assignment,\n"
    "bugprone-unused-raii,\n"
    "bugprone-unused-return-value,\n"
    "bugprone-use-after-move,\n"
    "bugprone-virtual-near-miss,\n"
    "cert-dcl21-cpp,\n"
    "cert-dcl58-cpp,\n"
    "cert-err34-c,\n"
    "cert-err52-cpp,\n"
    "cert-err60-cpp,\n"
    "cert-flp30-c,\n"
    "cert-msc50-cpp,\n"
    "cert-msc51-cpp,\n"
    "cert-str34-c,\n"
    "cppcoreguidelines-interfaces-global-init,\n"
    "cppcoreguidelines-narrowing-conversions,\n"
    "cppcoreguidelines-pro-type-member-init,\n"
    "cppcoreguidelines-pro-type-static-cast-downcast,\n"
    "cppcoreguidelines-slicing,\n"
    "google-default-arguments,\n"
    "google-explicit-constructor,\n"
    "google-runtime-operator,\n"
    "hicpp-exception-baseclass,\n"
    "hicpp-multiway-paths-covered,\n"
    "misc-misplaced-const,\n"
    "misc-new-delete-overloads,\n"
    "misc-no-recursion,\n"
    "misc-non-copyable-objects,\n"
    "misc-throw-by-value-catch-by-reference,\n"
    "misc-unconventional-assign-operator,\n"
    "misc-uniqueptr-reset-release,\n"
    "modernize-avoid-bind,\n"
    "modernize-concat-nested-namespaces,\n"
    "modernize-deprecated-headers,\n"
    "modernize-deprecated-ios-base-aliases,\n"
    "modernize-loop-convert,\n"
    "modernize-make-shared,\n"
    "modernize-make-unique,\n"
    "modernize-pass-by-value,\n"
    "modernize-raw-string-literal,\n"
    "modernize-redundant-void-arg,\n"
    "modernize-replace-auto-ptr,\n"
    "modernize-replace-disallow-copy-and-assign-macro,\n"
    "modernize-replace-random-shuffle,\n"
    "modernize-return-braced-init-list,\n"
    "modernize-shrink-to-fit,\n"
    "modernize-unary-static-assert,\n"
    "modernize-use-auto,\n"
    "modernize-use-bool-literals,\n"
    "modernize-use-emplace,\n"
    "modernize-use-equals-default,\n"
    "modernize-use-equals-delete,\n"
    "modernize-use-nodiscard,\n"
    "modernize-use-noexcept,\n"
    "modernize-use-nullptr,\n"
    "modernize-use-override,\n"
    "modernize-use-transparent-functors,\n"
    "modernize-use-uncaught-exceptions,\n"
    "mpi-buffer-deref,\n"
    "mpi-type-mismatch,\n"
    "openmp-use-default-none,\n"
    "performance-faster-string-find,\n"
    "performance-for-range-copy,\n"
    "performance-implicit-conversion-in-loop,\n"
    "performance-inefficient-algorithm,\n"
    "performance-inefficient-string-concatenation,\n"
    "performance-inefficient-vector-operation,\n"
    "performance-move-const-arg,\n"
    "performance-move-constructor-init,\n"
    "performance-no-automatic-move,\n"
    "performance-noexcept-move-constructor,\n"
    "performance-trivially-destructible,\n"
    "performance-type-promotion-in-math-fn,\n"
    "performance-unnecessary-copy-initialization,\n"
    "performance-unnecessary-value-param,\n"
    "portability-simd-intrinsics,\n"
    "readability-avoid-const-params-in-decls,\n"
    "readability-const-return-type,\n"
    "readability-container-size-empty,\n"
    "readability-convert-member-functions-to-static,\n"
    "readability-delete-null-pointer,\n"
    "readability-deleted-default,\n"
    "readability-inconsistent-declaration-parameter-name,\n"
    "readability-make-member-function-const,\n"
    "readability-misleading-indentation,\n"
    "readability-misplaced-array-index,\n"
    "readability-non-const-parameter,\n"
    "readability-redundant-control-flow,\n"
    "readability-redundant-declaration,\n"
    "readability-redundant-function-ptr-dereference,\n"
    "readability-redundant-smartptr-get,\n"
    "readability-redundant-string-cstr,\n"
    "readability-redundant-string-init,\n"
    "readability-simplify-subscript-expr,\n"
    "readability-static-accessed-through-instance,\n"
    "readability-static-definition-in-anonymous-namespace,\n"
    "readability-string-compare,\n"
    "readability-uniqueptr-delete-release,\n"
    "readability-use-anyofallof'"};

const static std::string git_ignore{"# Build folders\n"
                                    "/build/\n"
                                    "/cmake-build-debug/\n"
                                    "\n"
                                    "# Prerequisites\n"
                                    "*.d\n"
                                    "\n"
                                    "# Compiled Object files\n"
                                    "*.slo\n"
                                    "*.lo\n"
                                    "*.o\n"
                                    "*.obj\n"
                                    "\n"
                                    "# Precompiled Headers\n"
                                    "*.gch\n"
                                    "*.pch\n"
                                    "\n"
                                    "# Compiled Dynamic libraries\n"
                                    "*.so\n"
                                    "*.dylib\n"
                                    "*.dll\n"
                                    "\n"
                                    "# Fortran module files\n"
                                    "*.mod\n"
                                    "*.smod\n"
                                    "\n"
                                    "# Compiled Static libraries\n"
                                    "*.lai\n"
                                    "*.la\n"
                                    "*.a\n"
                                    "*.lib\n"
                                    "\n"
                                    "# Executables\n"
                                    "*.exe\n"
                                    "*.out\n"
                                    "*.app\n"
                                    ""};

const static std::string work_space{"{\n"
                                    "\t\"folders\": [\n"
                                    "\t\t{\n"
                                    "\t\t\t\"path\": \".\"\n"
                                    "\t\t}\n"
                                    "\t],\n"
                                    "\t\"settings\": {}\n"
                                    "}"};

} // namespace scripts
#endif // PRJ_CREATOR_FILE_CONTENTS_HPP
